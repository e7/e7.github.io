(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{457:function(t,s,a){"use strict";a.r(s);var n=a(35),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"windows"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#windows"}},[t._v("#")]),t._v(" Windows")]),t._v(" "),a("h2",{attrs:{id:"tips"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tips"}},[t._v("#")]),t._v(" Tips")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("为何高精度计时器不准确？")]),t._v(" "),a("p",[a("code",[t._v("QueryPerformanceCounter")]),t._v(" 可以获取性能计数器的当前值，单位是赫兹，根据"),a("code",[t._v("QueryPerformanceFrequency")]),t._v("返回的频率信息可以实现高精度计时，但在多核下是不准确的，在某一线程内调用"),a("code",[t._v("QueryPerformanceCounte")]),t._v("，线程会切换于不同的核心之间，该函数内部又没有加锁，这时候"),a("code",[t._v("QueryPerformanceCounter")]),t._v("返回值可能是不正确的，即计时器并不能保证是顺序累加的，可以通过"),a("strong",[t._v("绑定线程的CPU亲缘性")]),t._v("解决：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("HANDLE thread "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetCurrentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Set affinity to the first core")]),t._v("\nDWORD_PTR oldMask "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetThreadAffinityMask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GTimerMask "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Query the timer")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("QueryPerformanceCounter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mStartTime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmStartTick "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetTickCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Reset affinity")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetThreadAffinityMask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldMask"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("SetWindowHookEx")]),t._v("的钩子回调为何很慢？")]),t._v(" "),a("p",[t._v("消息钩子依赖windows消息循环，如果程序中没有线程处理事件消息就会很慢，具体原因未知，解决方案是增加消息事件循环：")]),t._v(" "),a("div",{staticClass:"language-c++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("MSG nMsg {};\nwhile (::GetMessage(&nMsg, nullptr, 0, 0)) {\n    ::TranslateMessage(&nMsg);\n    ::DispatchMessage(&nMsg);\n}\n")])])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);