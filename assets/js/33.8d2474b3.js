(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{467:function(e,t,a){"use strict";a.r(t);var i=a(35),v=Object(i.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"redis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis"}},[e._v("#")]),e._v(" Redis")]),e._v(" "),a("h2",{attrs:{id:"缓存一致性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存一致性"}},[e._v("#")]),e._v(" 缓存一致性")]),e._v(" "),a("p",[e._v("缓存的数据一定要带TTL作为最终一致的兜底策略。")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("cache aside模式")]),e._v(" "),a("p",[e._v("写操作")]),e._v(" "),a("ol",[a("li",[e._v("更新数据库。")]),e._v(" "),a("li",[e._v("删除缓存，不使用update的原因是并发更新的时候不能保证更新的是最新的数据。")]),e._v(" "),a("li",[e._v("更保险可以加上cdc（比如"),a("a",{attrs:{href:"https://github.com/alibaba/canal",target:"_blank",rel:"noopener noreferrer"}},[e._v("canal"),a("OutboundLink")],1),e._v("）覆盖缓存（使用set）。")])]),e._v(" "),a("p",[e._v("读操作")]),e._v(" "),a("ol",[a("li",[e._v("读数据库。")]),e._v(" "),a("li",[e._v("回填缓存，一定要用setnx，因为读取到的数据小概率是脏数据的。")])])]),e._v(" "),a("li",[a("p",[e._v("CRDT")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.zhihu.com/question/507425610",target:"_blank",rel:"noopener noreferrer"}},[e._v("Conflict-free Replicated Data Type"),a("OutboundLink")],1)])])])]),e._v(" "),a("h2",{attrs:{id:"tips"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tips"}},[e._v("#")]),e._v(" Tips")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("缓存穿透，核心就是只让一个人取db")]),e._v(" "),a("ul",[a("li",[e._v("Singlefly，对关键字进行一致性哈希，使其某一维度的key一定命中某个节点，然后节点内使用互斥锁保证归并回源，但不能处理批量查询的情况。")]),e._v(" "),a("li",[e._v("Lease，就是限流，秒杀也可以使用类似机制，只有拿到token的请求才能访问数据库。")]),e._v(" "),a("li",[e._v("空缓存保护（请求在cache和db都查不到）\n"),a("ul",[a("li",[e._v("通过一些算法让请求参数不可枚举，直接在算法层面挡掉大部分恶意请求。")]),e._v(" "),a("li",[e._v("查不到的数据，写个TTL较短的空缓存")])])])])]),e._v(" "),a("li",[a("p",[e._v("热点缓存")]),e._v(" "),a("ul",[a("li",[e._v("小表广播，热点数据本地cache，App定时更新，甚至运营平台支持广播刷新本地cache")]),e._v(" "),a("li",[e._v("对key加后缀，#1、#2之类，一定会miss，然后就会从db捞然后缓存")]),e._v(" "),a("li",[e._v("热点数据发现")])])]),e._v(" "),a("li",[a("p",[e._v("每个微服务独享redis（或redis cluster）")])]),e._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://mozillazg.com/2019/04/load-balancing-strategy-algorithm-consistent-hashing-with-bounded-loads",target:"_blank",rel:"noopener noreferrer"}},[e._v("有界负载一致性哈希"),a("OutboundLink")],1)])]),e._v(" "),a("li",[a("p",[e._v("拆分key，同一个hashset会落到同一个节点上，hashset过大会导致内存及请求的不均匀。")])]),e._v(" "),a("li",[a("p",[e._v("序列化使用protobuf，尽可能降低内存占用。")])]),e._v(" "),a("li",[a("p",[e._v("增量更新一致性：先EXPIRE再ZADD/HSET等操作，保证索引结构体务必存在的情况下去操作新增数据。")])]),e._v(" "),a("li",[a("p",[e._v("Bitset，存储每日登录用户，为了避免BITSET过大或者热点，需要使用region sharding，比如按照mid求余%和/1000，商为key，余数作为offset。")])]),e._v(" "),a("li",[a("p",[e._v("List：当堆栈使用")])]),e._v(" "),a("li",[a("p",[e._v("Sortedset：翻页、排序、有序的集合，杜绝zrange或zrevrange返回的集合过大。")])]),e._v(" "),a("li",[a("p",[e._v("Hashset：杜绝hgetall。")])]),e._v(" "),a("li",[a("p",[e._v("String：使用SET的EX/NX等扩展指令，SETNX可用于分布式锁，SETEX则是原子化的SET+EXPIRE")])]),e._v(" "),a("li",[a("p",[e._v("避免超大value。")])])]),e._v(" "),a("h1",{attrs:{id:"memcached"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memcached"}},[e._v("#")]),e._v(" Memcached")]),e._v(" "),a("h2",{attrs:{id:"tips-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tips-2"}},[e._v("#")]),e._v(" Tips")]),e._v(" "),a("ul",[a("li",[e._v("尽量gets这种批量操作，尽可能pipeline减少网络io次数")]),e._v(" "),a("li",[e._v("flag使用：标识compress、encoding、large value等")]),e._v(" "),a("li",[e._v("使用二进制协议，支持pipeline delete，udp读取、tcp更新")])])])}),[],!1,null,null,null);t.default=v.exports}}]);